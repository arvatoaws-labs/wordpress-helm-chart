# Default values for wordpress.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: arvatoaws/wordpress
  tag: latest
  #pullPolicy: IfNotPresent
  pullPolicy: Always

nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

nginx:
  resources: {}
  disallow_robots: false
  client_max_body_size: 10M
  additional_config:

php:
  resources: {}
  fpm:
    pm:
      max_children: 10
      start_servers: 2
      min_spare_servers: 1
      max_spare_servers: 3
      process_idle_timeout: 10s
      max_requests: 500
  php_admin_value:
    memory_limit: 64M
    upload_max_filesize: 10M
    post_max_size: 15M
    date.timezone: Europe/Berlin
    display_errors: 'Off'

## Additional environment variables to set
extraEnv: []
# extraEnv:
#   - name: FOO
#     valueFrom:
#       secretKeyRef:
#         key: FOO
#         name: secret-resource

monitoring:
  enabled: true
  serviceMonitor:
    # When set true and if Prometheus Operator is installed then use a ServiceMonitor to configure scraping
    enabled: true
    # Set the namespace the ServiceMonitor should be deployed
    # namespace: monitoring
    # Set how frequently Prometheus should scrape
    # interval: 30s

exporter:
  nginx:
    image:
      repository: nginx/nginx-prometheus-exporter
      tag: 0.3.0
      pullPolicy: Always
    port: 9113
    telemetry_path: /metrics
    nginx_plus: false
    scrape_uri: "http://127.0.0.1:8080/nginx-status"
    ssl_verify: false
    timeout: "60"
    nginx_retries: "0"
    nginx_retry_interval: "3"
    resources: {}

  phpfpm:
    image:
      repository: hipages/php-fpm_exporter
      tag: 1.0.0
      pullPolicy: Always
    port: 9253
    metrics: /metrics
    scrape_uri: "tcp://127.0.0.1:9000/fpm-status"
    fix_process_count: false
    log_level: debug
    resources: {}

offload:
  bucket: null
  region: null
  domain: null
  cloudfront: null
  local_domains: null

plugins:
  - amazon-s3-and-cloudfront
  - amazon-s3-and-cloudfront-tweaks

hooks:
  pre-install:
    - wait-for-mysql-root
    - create-mysql-database
    - create-mysql-user
    - wait-for-mysql-user
    - verify-wp-core-checksums
    - install-wp-core
    - update-wp-core-database
    #- activate-wp-plugins
  post-install:
  pre-upgrade:
    - wait-for-mysql-user
    - verify-wp-core-checksums
    - update-wp-admin-user
  post-upgrade:
    - wait-for-mysql-user
    - update-wp-core-database
    - activate-wp-plugins
    - migrate-amazon-s3

hostnameMapping:

externalSecrets:
  enabled: false
  backendType: systemManager
  mapping:
#    db-password: /dev/wordpress-1/DB/password

externalDatabase:
## All of these values are only used when mariadb.enabled is set to false
  ## Database host
  host: localhost

  ## non-root Username for Wordpress Database
  user: bn_wordpress

  ## Database password
  password: ""

  ## Database name
  database: bitnami_wordpress

  ## Database port number
  port: 3306

  root_user: null
  root_password: null

## User of the application
## ref: https://github.com/bitnami/bitnami-docker-wordpress#environment-variables
##
wordpressUsername: user

## Application password
## Defaults to a random 10-character alphanumeric string if not set
## ref: https://github.com/bitnami/bitnami-docker-wordpress#environment-variables
##
# wordpressPassword:

## Admin email
## ref: https://github.com/bitnami/bitnami-docker-wordpress#environment-variables
##
wordpressEmail: user@example.com

## First name
## ref: https://github.com/bitnami/bitnami-docker-wordpress#environment-variables
##
wordpressFirstName: FirstName

## Last name
## ref: https://github.com/bitnami/bitnami-docker-wordpress#environment-variables
##
wordpressLastName: LastName

## Blog name
## ref: https://github.com/bitnami/bitnami-docker-wordpress#environment-variables
##
wordpressBlogName: User's Blog!

## Table prefix
## ref: https://github.com/bitnami/bitnami-docker-wordpress#environment-variables
##
wordpressTablePrefix: wp_

## Skip wizard installation (only if you use an external database that already contains WordPress data)
## ref: https://github.com/bitnami/bitnami-docker-wordpress#connect-wordpress-docker-container-to-an-existing-database
##
wordpressSkipInstall: "no"

debug:
  enabled: false

supercache:
  enabled: false